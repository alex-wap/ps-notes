avltree.txt

binary tree overview
- collection that stores data in tree structure 
- node in tree contains 
    - value
    - left/right pointers 
- navigation rules
    - smaller values on left 
    - greater values on right 
- standard tree operations
    - insertion
    - deletion
    - search
    - clear 
    - enumeration 
   
AVL tree 
- self balancing tree 
- similar to binary tree 
    - same structure constraints 
    - search and enumeration are identical
    - insertion and deletion differ by running the balance algo 
- new concepts
    - self balance 
    - height 
    - balance factor 
    - right/left heavy 
 
unbalanced binary tree 
- can become a singly linked list in worst case O(n) search performance 

balanced binary tree 
- free remains balanced as nodes are inserted or deleted 
- height of left and right tree differ by at most 1 
- O(log n) search performance

insertion 
- same as BT 
- then balance algo runs 

deletion 
- same as BT 
- then balance algo runs 

IComparable 
IEnumerable 

AVL tree class 
modify contents
- add 
- remove 
info
- contains
- count 
traversal
- in,pre,post
- get enumerator 

AVL node class 
BT properties
- left, right, value 
balance operations 
support properties 

parent property 
node height 
- left height 
- right height 
- max child height 

balance factor 
- diff between left and right heights (right height minus left height)
- state => left heavy, right heavy, balanced (so you can know which side has too many nodes)

balancing algos 
- balance is done using node rotation 
- rotation occurs at the insertion and deletion point (and parents)
- rotation changes the structure of the tree 
- 4 types of rotation 
    - right rotation
    - left rotation 
    - right-left rotation 
    - left-right rotation 

tree states
- right heavy 
    - if right child is left heavy: left/right rotation 
    - else: left rotation 
- left heavy 
    - if left child is right heavy: right/left rotation 
    - else: right rotation

RIGHT ROTATION
- left child becomes new root 
- right child is assigned to left child of old root 
- previous root becomes new right child 

    4
  2
1   3
becomes 
  2    4
1   3 
becomes 
  2
1   4
  3
  
LEFT ROTATION 
- right child new root 
- left child is assigned to right child of old root 
- previous root becomes new root's left child 
1
  3
2   4
becomes
1    3
  2    4
becomes 
  3
1    4
  2

RIGHT-LEFT ROTATION 
- left rotate left child 
- right rotate updated tree 
  3
1
  2
becomes 
    3
  2
1
becomes 
  2
1   3

LEFT-RIGHT ROTATION 
- right rotate right child 
- left rotate updated tree 
  1
3
  2
becomes 
1
  2
    3
becomes 
  2
1   3

